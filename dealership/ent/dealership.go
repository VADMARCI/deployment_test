// Copyright 2022-present Vlabs Development Kft
//
// All rights reserved under a proprietary license.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"dealership/ent/dealership"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Dealership is the model entity for the Dealership schema.
type Dealership struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// City holds the value of the "city" field.
	City string `json:"city,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DealershipQuery when eager-loading is set.
	Edges        DealershipEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DealershipEdges holds the relations/edges for other nodes in the graph.
type DealershipEdges struct {
	// Cars holds the value of the cars edge.
	Cars []*Cars `json:"cars,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedCars map[string][]*Cars
}

// CarsOrErr returns the Cars value or an error if the edge
// was not loaded in eager-loading.
func (e DealershipEdges) CarsOrErr() ([]*Cars, error) {
	if e.loadedTypes[0] {
		return e.Cars, nil
	}
	return nil, &NotLoadedError{edge: "cars"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dealership) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dealership.FieldID:
			values[i] = new(sql.NullInt64)
		case dealership.FieldCity, dealership.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dealership fields.
func (d *Dealership) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dealership.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dealership.FieldCity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field city", values[i])
			} else if value.Valid {
				d.City = value.String
			}
		case dealership.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dealership.
// This includes values selected through modifiers, order, etc.
func (d *Dealership) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryCars queries the "cars" edge of the Dealership entity.
func (d *Dealership) QueryCars() *CarsQuery {
	return NewDealershipClient(d.config).QueryCars(d)
}

// Update returns a builder for updating this Dealership.
// Note that you need to call Dealership.Unwrap() before calling this method if this Dealership
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dealership) Update() *DealershipUpdateOne {
	return NewDealershipClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dealership entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dealership) Unwrap() *Dealership {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dealership is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dealership) String() string {
	var builder strings.Builder
	builder.WriteString("Dealership(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("city=")
	builder.WriteString(d.City)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// NamedCars returns the Cars named value or an error if the edge was not
// loaded in eager-loading with this name.
func (d *Dealership) NamedCars(name string) ([]*Cars, error) {
	if d.Edges.namedCars == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := d.Edges.namedCars[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (d *Dealership) appendNamedCars(name string, edges ...*Cars) {
	if d.Edges.namedCars == nil {
		d.Edges.namedCars = make(map[string][]*Cars)
	}
	if len(edges) == 0 {
		d.Edges.namedCars[name] = []*Cars{}
	} else {
		d.Edges.namedCars[name] = append(d.Edges.namedCars[name], edges...)
	}
}

// Dealerships is a parsable slice of Dealership.
type Dealerships []*Dealership
