// Copyright 2022-present Vlabs Development Kft
//
// All rights reserved under a proprietary license.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"dealership/ent/cars"
	"dealership/ent/dealership"
	"dealership/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cars.Table,
			Columns: cars.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: cars.FieldID,
			},
		},
		Type:   "Cars",
		Fields: map[string]*sqlgraph.FieldSpec{},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   dealership.Table,
			Columns: dealership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: dealership.FieldID,
			},
		},
		Type: "Dealership",
		Fields: map[string]*sqlgraph.FieldSpec{
			dealership.FieldCity: {Type: field.TypeString, Column: dealership.FieldCity},
			dealership.FieldName: {Type: field.TypeString, Column: dealership.FieldName},
		},
	}
	graph.MustAddE(
		"dealership_cars",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cars.DealershipCarsTable,
			Columns: cars.DealershipCarsPrimaryKey,
			Bidi:    false,
		},
		"Cars",
		"Dealership",
	)
	graph.MustAddE(
		"cars",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   dealership.CarsTable,
			Columns: dealership.CarsPrimaryKey,
			Bidi:    false,
		},
		"Dealership",
		"Cars",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cq *CarsQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CarsQuery builder.
func (cq *CarsQuery) Filter() *CarsFilter {
	return &CarsFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CarsMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CarsMutation builder.
func (m *CarsMutation) Filter() *CarsFilter {
	return &CarsFilter{config: m.config, predicateAdder: m}
}

// CarsFilter provides a generic filtering capability at runtime for CarsQuery.
type CarsFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CarsFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *CarsFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(cars.FieldID))
}

// WhereHasDealershipCars applies a predicate to check if query has an edge dealership_cars.
func (f *CarsFilter) WhereHasDealershipCars() {
	f.Where(entql.HasEdge("dealership_cars"))
}

// WhereHasDealershipCarsWith applies a predicate to check if query has an edge dealership_cars with a given conditions (other predicates).
func (f *CarsFilter) WhereHasDealershipCarsWith(preds ...predicate.Dealership) {
	f.Where(entql.HasEdgeWith("dealership_cars", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (dq *DealershipQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DealershipQuery builder.
func (dq *DealershipQuery) Filter() *DealershipFilter {
	return &DealershipFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DealershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DealershipMutation builder.
func (m *DealershipMutation) Filter() *DealershipFilter {
	return &DealershipFilter{config: m.config, predicateAdder: m}
}

// DealershipFilter provides a generic filtering capability at runtime for DealershipQuery.
type DealershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DealershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *DealershipFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(dealership.FieldID))
}

// WhereCity applies the entql string predicate on the city field.
func (f *DealershipFilter) WhereCity(p entql.StringP) {
	f.Where(p.Field(dealership.FieldCity))
}

// WhereName applies the entql string predicate on the name field.
func (f *DealershipFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(dealership.FieldName))
}

// WhereHasCars applies a predicate to check if query has an edge cars.
func (f *DealershipFilter) WhereHasCars() {
	f.Where(entql.HasEdge("cars"))
}

// WhereHasCarsWith applies a predicate to check if query has an edge cars with a given conditions (other predicates).
func (f *DealershipFilter) WhereHasCarsWith(preds ...predicate.Cars) {
	f.Where(entql.HasEdgeWith("cars", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
