// Copyright 2022-present Vlabs Development Kft
//
// All rights reserved under a proprietary license.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dealership/ent/cars"
	"dealership/ent/dealership"
	"dealership/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CarsUpdate is the builder for updating Cars entities.
type CarsUpdate struct {
	config
	hooks     []Hook
	mutation  *CarsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CarsUpdate builder.
func (cu *CarsUpdate) Where(ps ...predicate.Cars) *CarsUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// AddDealershipCarIDs adds the "dealership_cars" edge to the Dealership entity by IDs.
func (cu *CarsUpdate) AddDealershipCarIDs(ids ...int) *CarsUpdate {
	cu.mutation.AddDealershipCarIDs(ids...)
	return cu
}

// AddDealershipCars adds the "dealership_cars" edges to the Dealership entity.
func (cu *CarsUpdate) AddDealershipCars(d ...*Dealership) *CarsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDealershipCarIDs(ids...)
}

// Mutation returns the CarsMutation object of the builder.
func (cu *CarsUpdate) Mutation() *CarsMutation {
	return cu.mutation
}

// ClearDealershipCars clears all "dealership_cars" edges to the Dealership entity.
func (cu *CarsUpdate) ClearDealershipCars() *CarsUpdate {
	cu.mutation.ClearDealershipCars()
	return cu
}

// RemoveDealershipCarIDs removes the "dealership_cars" edge to Dealership entities by IDs.
func (cu *CarsUpdate) RemoveDealershipCarIDs(ids ...int) *CarsUpdate {
	cu.mutation.RemoveDealershipCarIDs(ids...)
	return cu
}

// RemoveDealershipCars removes "dealership_cars" edges to Dealership entities.
func (cu *CarsUpdate) RemoveDealershipCars(d ...*Dealership) *CarsUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDealershipCarIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CarsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CarsUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CarsUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CarsUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *CarsUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CarsUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *CarsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cars.Table, cars.Columns, sqlgraph.NewFieldSpec(cars.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cu.mutation.DealershipCarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cars.DealershipCarsTable,
			Columns: cars.DealershipCarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDealershipCarsIDs(); len(nodes) > 0 && !cu.mutation.DealershipCarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cars.DealershipCarsTable,
			Columns: cars.DealershipCarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DealershipCarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cars.DealershipCarsTable,
			Columns: cars.DealershipCarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cars.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CarsUpdateOne is the builder for updating a single Cars entity.
type CarsUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CarsMutation
	modifiers []func(*sql.UpdateBuilder)
}

// AddDealershipCarIDs adds the "dealership_cars" edge to the Dealership entity by IDs.
func (cuo *CarsUpdateOne) AddDealershipCarIDs(ids ...int) *CarsUpdateOne {
	cuo.mutation.AddDealershipCarIDs(ids...)
	return cuo
}

// AddDealershipCars adds the "dealership_cars" edges to the Dealership entity.
func (cuo *CarsUpdateOne) AddDealershipCars(d ...*Dealership) *CarsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDealershipCarIDs(ids...)
}

// Mutation returns the CarsMutation object of the builder.
func (cuo *CarsUpdateOne) Mutation() *CarsMutation {
	return cuo.mutation
}

// ClearDealershipCars clears all "dealership_cars" edges to the Dealership entity.
func (cuo *CarsUpdateOne) ClearDealershipCars() *CarsUpdateOne {
	cuo.mutation.ClearDealershipCars()
	return cuo
}

// RemoveDealershipCarIDs removes the "dealership_cars" edge to Dealership entities by IDs.
func (cuo *CarsUpdateOne) RemoveDealershipCarIDs(ids ...int) *CarsUpdateOne {
	cuo.mutation.RemoveDealershipCarIDs(ids...)
	return cuo
}

// RemoveDealershipCars removes "dealership_cars" edges to Dealership entities.
func (cuo *CarsUpdateOne) RemoveDealershipCars(d ...*Dealership) *CarsUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDealershipCarIDs(ids...)
}

// Where appends a list predicates to the CarsUpdate builder.
func (cuo *CarsUpdateOne) Where(ps ...predicate.Cars) *CarsUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CarsUpdateOne) Select(field string, fields ...string) *CarsUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cars entity.
func (cuo *CarsUpdateOne) Save(ctx context.Context) (*Cars, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CarsUpdateOne) SaveX(ctx context.Context) *Cars {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CarsUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CarsUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *CarsUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CarsUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *CarsUpdateOne) sqlSave(ctx context.Context) (_node *Cars, err error) {
	_spec := sqlgraph.NewUpdateSpec(cars.Table, cars.Columns, sqlgraph.NewFieldSpec(cars.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cars.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cars.FieldID)
		for _, f := range fields {
			if !cars.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cars.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if cuo.mutation.DealershipCarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cars.DealershipCarsTable,
			Columns: cars.DealershipCarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealership.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDealershipCarsIDs(); len(nodes) > 0 && !cuo.mutation.DealershipCarsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cars.DealershipCarsTable,
			Columns: cars.DealershipCarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DealershipCarsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   cars.DealershipCarsTable,
			Columns: cars.DealershipCarsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dealership.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Cars{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cars.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
