// Copyright 2022-present Vlabs Development Kft
//
// All rights reserved under a proprietary license.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"dealership/ent/cars"
	"dealership/ent/dealership"
	"dealership/ent/predicate"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCars       = "Cars"
	TypeDealership = "Dealership"
)

// CarsMutation represents an operation that mutates the Cars nodes in the graph.
type CarsMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	clearedFields          map[string]struct{}
	dealership_cars        map[int]struct{}
	removeddealership_cars map[int]struct{}
	cleareddealership_cars bool
	done                   bool
	oldValue               func(context.Context) (*Cars, error)
	predicates             []predicate.Cars
}

var _ ent.Mutation = (*CarsMutation)(nil)

// carsOption allows management of the mutation configuration using functional options.
type carsOption func(*CarsMutation)

// newCarsMutation creates new mutation for the Cars entity.
func newCarsMutation(c config, op Op, opts ...carsOption) *CarsMutation {
	m := &CarsMutation{
		config:        c,
		op:            op,
		typ:           TypeCars,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCarsID sets the ID field of the mutation.
func withCarsID(id int) carsOption {
	return func(m *CarsMutation) {
		var (
			err   error
			once  sync.Once
			value *Cars
		)
		m.oldValue = func(ctx context.Context) (*Cars, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cars.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCars sets the old Cars of the mutation.
func withCars(node *Cars) carsOption {
	return func(m *CarsMutation) {
		m.oldValue = func(context.Context) (*Cars, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CarsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CarsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Cars entities.
func (m *CarsMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CarsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CarsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cars.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddDealershipCarIDs adds the "dealership_cars" edge to the Dealership entity by ids.
func (m *CarsMutation) AddDealershipCarIDs(ids ...int) {
	if m.dealership_cars == nil {
		m.dealership_cars = make(map[int]struct{})
	}
	for i := range ids {
		m.dealership_cars[ids[i]] = struct{}{}
	}
}

// ClearDealershipCars clears the "dealership_cars" edge to the Dealership entity.
func (m *CarsMutation) ClearDealershipCars() {
	m.cleareddealership_cars = true
}

// DealershipCarsCleared reports if the "dealership_cars" edge to the Dealership entity was cleared.
func (m *CarsMutation) DealershipCarsCleared() bool {
	return m.cleareddealership_cars
}

// RemoveDealershipCarIDs removes the "dealership_cars" edge to the Dealership entity by IDs.
func (m *CarsMutation) RemoveDealershipCarIDs(ids ...int) {
	if m.removeddealership_cars == nil {
		m.removeddealership_cars = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.dealership_cars, ids[i])
		m.removeddealership_cars[ids[i]] = struct{}{}
	}
}

// RemovedDealershipCars returns the removed IDs of the "dealership_cars" edge to the Dealership entity.
func (m *CarsMutation) RemovedDealershipCarsIDs() (ids []int) {
	for id := range m.removeddealership_cars {
		ids = append(ids, id)
	}
	return
}

// DealershipCarsIDs returns the "dealership_cars" edge IDs in the mutation.
func (m *CarsMutation) DealershipCarsIDs() (ids []int) {
	for id := range m.dealership_cars {
		ids = append(ids, id)
	}
	return
}

// ResetDealershipCars resets all changes to the "dealership_cars" edge.
func (m *CarsMutation) ResetDealershipCars() {
	m.dealership_cars = nil
	m.cleareddealership_cars = false
	m.removeddealership_cars = nil
}

// Where appends a list predicates to the CarsMutation builder.
func (m *CarsMutation) Where(ps ...predicate.Cars) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CarsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CarsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cars, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CarsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CarsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cars).
func (m *CarsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CarsMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CarsMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CarsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Cars field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CarsMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Cars field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CarsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CarsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CarsMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Cars numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CarsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CarsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CarsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Cars nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CarsMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Cars field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CarsMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.dealership_cars != nil {
		edges = append(edges, cars.EdgeDealershipCars)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CarsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case cars.EdgeDealershipCars:
		ids := make([]ent.Value, 0, len(m.dealership_cars))
		for id := range m.dealership_cars {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CarsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddealership_cars != nil {
		edges = append(edges, cars.EdgeDealershipCars)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CarsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case cars.EdgeDealershipCars:
		ids := make([]ent.Value, 0, len(m.removeddealership_cars))
		for id := range m.removeddealership_cars {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CarsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddealership_cars {
		edges = append(edges, cars.EdgeDealershipCars)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CarsMutation) EdgeCleared(name string) bool {
	switch name {
	case cars.EdgeDealershipCars:
		return m.cleareddealership_cars
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CarsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Cars unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CarsMutation) ResetEdge(name string) error {
	switch name {
	case cars.EdgeDealershipCars:
		m.ResetDealershipCars()
		return nil
	}
	return fmt.Errorf("unknown Cars edge %s", name)
}

// DealershipMutation represents an operation that mutates the Dealership nodes in the graph.
type DealershipMutation struct {
	config
	op            Op
	typ           string
	id            *int
	city          *string
	name          *string
	clearedFields map[string]struct{}
	cars          map[int]struct{}
	removedcars   map[int]struct{}
	clearedcars   bool
	done          bool
	oldValue      func(context.Context) (*Dealership, error)
	predicates    []predicate.Dealership
}

var _ ent.Mutation = (*DealershipMutation)(nil)

// dealershipOption allows management of the mutation configuration using functional options.
type dealershipOption func(*DealershipMutation)

// newDealershipMutation creates new mutation for the Dealership entity.
func newDealershipMutation(c config, op Op, opts ...dealershipOption) *DealershipMutation {
	m := &DealershipMutation{
		config:        c,
		op:            op,
		typ:           TypeDealership,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDealershipID sets the ID field of the mutation.
func withDealershipID(id int) dealershipOption {
	return func(m *DealershipMutation) {
		var (
			err   error
			once  sync.Once
			value *Dealership
		)
		m.oldValue = func(ctx context.Context) (*Dealership, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Dealership.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDealership sets the old Dealership of the mutation.
func withDealership(node *Dealership) dealershipOption {
	return func(m *DealershipMutation) {
		m.oldValue = func(context.Context) (*Dealership, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DealershipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DealershipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DealershipMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DealershipMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Dealership.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCity sets the "city" field.
func (m *DealershipMutation) SetCity(s string) {
	m.city = &s
}

// City returns the value of the "city" field in the mutation.
func (m *DealershipMutation) City() (r string, exists bool) {
	v := m.city
	if v == nil {
		return
	}
	return *v, true
}

// OldCity returns the old "city" field's value of the Dealership entity.
// If the Dealership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealershipMutation) OldCity(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCity: %w", err)
	}
	return oldValue.City, nil
}

// ResetCity resets all changes to the "city" field.
func (m *DealershipMutation) ResetCity() {
	m.city = nil
}

// SetName sets the "name" field.
func (m *DealershipMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DealershipMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Dealership entity.
// If the Dealership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DealershipMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DealershipMutation) ResetName() {
	m.name = nil
}

// AddCarIDs adds the "cars" edge to the Cars entity by ids.
func (m *DealershipMutation) AddCarIDs(ids ...int) {
	if m.cars == nil {
		m.cars = make(map[int]struct{})
	}
	for i := range ids {
		m.cars[ids[i]] = struct{}{}
	}
}

// ClearCars clears the "cars" edge to the Cars entity.
func (m *DealershipMutation) ClearCars() {
	m.clearedcars = true
}

// CarsCleared reports if the "cars" edge to the Cars entity was cleared.
func (m *DealershipMutation) CarsCleared() bool {
	return m.clearedcars
}

// RemoveCarIDs removes the "cars" edge to the Cars entity by IDs.
func (m *DealershipMutation) RemoveCarIDs(ids ...int) {
	if m.removedcars == nil {
		m.removedcars = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.cars, ids[i])
		m.removedcars[ids[i]] = struct{}{}
	}
}

// RemovedCars returns the removed IDs of the "cars" edge to the Cars entity.
func (m *DealershipMutation) RemovedCarsIDs() (ids []int) {
	for id := range m.removedcars {
		ids = append(ids, id)
	}
	return
}

// CarsIDs returns the "cars" edge IDs in the mutation.
func (m *DealershipMutation) CarsIDs() (ids []int) {
	for id := range m.cars {
		ids = append(ids, id)
	}
	return
}

// ResetCars resets all changes to the "cars" edge.
func (m *DealershipMutation) ResetCars() {
	m.cars = nil
	m.clearedcars = false
	m.removedcars = nil
}

// Where appends a list predicates to the DealershipMutation builder.
func (m *DealershipMutation) Where(ps ...predicate.Dealership) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DealershipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DealershipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Dealership, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DealershipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DealershipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Dealership).
func (m *DealershipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DealershipMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.city != nil {
		fields = append(fields, dealership.FieldCity)
	}
	if m.name != nil {
		fields = append(fields, dealership.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DealershipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dealership.FieldCity:
		return m.City()
	case dealership.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DealershipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dealership.FieldCity:
		return m.OldCity(ctx)
	case dealership.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Dealership field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DealershipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dealership.FieldCity:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCity(v)
		return nil
	case dealership.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Dealership field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DealershipMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DealershipMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DealershipMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Dealership numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DealershipMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DealershipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DealershipMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Dealership nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DealershipMutation) ResetField(name string) error {
	switch name {
	case dealership.FieldCity:
		m.ResetCity()
		return nil
	case dealership.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Dealership field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DealershipMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cars != nil {
		edges = append(edges, dealership.EdgeCars)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DealershipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dealership.EdgeCars:
		ids := make([]ent.Value, 0, len(m.cars))
		for id := range m.cars {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DealershipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedcars != nil {
		edges = append(edges, dealership.EdgeCars)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DealershipMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dealership.EdgeCars:
		ids := make([]ent.Value, 0, len(m.removedcars))
		for id := range m.removedcars {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DealershipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedcars {
		edges = append(edges, dealership.EdgeCars)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DealershipMutation) EdgeCleared(name string) bool {
	switch name {
	case dealership.EdgeCars:
		return m.clearedcars
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DealershipMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Dealership unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DealershipMutation) ResetEdge(name string) error {
	switch name {
	case dealership.EdgeCars:
		m.ResetCars()
		return nil
	}
	return fmt.Errorf("unknown Dealership edge %s", name)
}
