// Copyright 2022-present Vlabs Development Kft
//
// All rights reserved under a proprietary license.
//
// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"dealership/ent/migrate"

	"dealership/ent/cars"
	"dealership/ent/dealership"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Cars is the client for interacting with the Cars builders.
	Cars *CarsClient
	// Dealership is the client for interacting with the Dealership builders.
	Dealership *DealershipClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Cars = NewCarsClient(c.config)
	c.Dealership = NewDealershipClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Cars:       NewCarsClient(cfg),
		Dealership: NewDealershipClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Cars:       NewCarsClient(cfg),
		Dealership: NewDealershipClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Cars.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Cars.Use(hooks...)
	c.Dealership.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Cars.Intercept(interceptors...)
	c.Dealership.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *CarsMutation:
		return c.Cars.mutate(ctx, m)
	case *DealershipMutation:
		return c.Dealership.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CarsClient is a client for the Cars schema.
type CarsClient struct {
	config
}

// NewCarsClient returns a client for the Cars from the given config.
func NewCarsClient(c config) *CarsClient {
	return &CarsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cars.Hooks(f(g(h())))`.
func (c *CarsClient) Use(hooks ...Hook) {
	c.hooks.Cars = append(c.hooks.Cars, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cars.Intercept(f(g(h())))`.
func (c *CarsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cars = append(c.inters.Cars, interceptors...)
}

// Create returns a builder for creating a Cars entity.
func (c *CarsClient) Create() *CarsCreate {
	mutation := newCarsMutation(c.config, OpCreate)
	return &CarsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cars entities.
func (c *CarsClient) CreateBulk(builders ...*CarsCreate) *CarsCreateBulk {
	return &CarsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cars.
func (c *CarsClient) Update() *CarsUpdate {
	mutation := newCarsMutation(c.config, OpUpdate)
	return &CarsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CarsClient) UpdateOne(ca *Cars) *CarsUpdateOne {
	mutation := newCarsMutation(c.config, OpUpdateOne, withCars(ca))
	return &CarsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CarsClient) UpdateOneID(id int) *CarsUpdateOne {
	mutation := newCarsMutation(c.config, OpUpdateOne, withCarsID(id))
	return &CarsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cars.
func (c *CarsClient) Delete() *CarsDelete {
	mutation := newCarsMutation(c.config, OpDelete)
	return &CarsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CarsClient) DeleteOne(ca *Cars) *CarsDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CarsClient) DeleteOneID(id int) *CarsDeleteOne {
	builder := c.Delete().Where(cars.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CarsDeleteOne{builder}
}

// Query returns a query builder for Cars.
func (c *CarsClient) Query() *CarsQuery {
	return &CarsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCars},
		inters: c.Interceptors(),
	}
}

// Get returns a Cars entity by its id.
func (c *CarsClient) Get(ctx context.Context, id int) (*Cars, error) {
	return c.Query().Where(cars.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CarsClient) GetX(ctx context.Context, id int) *Cars {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDealershipCars queries the dealership_cars edge of a Cars.
func (c *CarsClient) QueryDealershipCars(ca *Cars) *DealershipQuery {
	query := (&DealershipClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(cars.Table, cars.FieldID, id),
			sqlgraph.To(dealership.Table, dealership.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, cars.DealershipCarsTable, cars.DealershipCarsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CarsClient) Hooks() []Hook {
	return c.hooks.Cars
}

// Interceptors returns the client interceptors.
func (c *CarsClient) Interceptors() []Interceptor {
	return c.inters.Cars
}

func (c *CarsClient) mutate(ctx context.Context, m *CarsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CarsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CarsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CarsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CarsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cars mutation op: %q", m.Op())
	}
}

// DealershipClient is a client for the Dealership schema.
type DealershipClient struct {
	config
}

// NewDealershipClient returns a client for the Dealership from the given config.
func NewDealershipClient(c config) *DealershipClient {
	return &DealershipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dealership.Hooks(f(g(h())))`.
func (c *DealershipClient) Use(hooks ...Hook) {
	c.hooks.Dealership = append(c.hooks.Dealership, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dealership.Intercept(f(g(h())))`.
func (c *DealershipClient) Intercept(interceptors ...Interceptor) {
	c.inters.Dealership = append(c.inters.Dealership, interceptors...)
}

// Create returns a builder for creating a Dealership entity.
func (c *DealershipClient) Create() *DealershipCreate {
	mutation := newDealershipMutation(c.config, OpCreate)
	return &DealershipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dealership entities.
func (c *DealershipClient) CreateBulk(builders ...*DealershipCreate) *DealershipCreateBulk {
	return &DealershipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dealership.
func (c *DealershipClient) Update() *DealershipUpdate {
	mutation := newDealershipMutation(c.config, OpUpdate)
	return &DealershipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DealershipClient) UpdateOne(d *Dealership) *DealershipUpdateOne {
	mutation := newDealershipMutation(c.config, OpUpdateOne, withDealership(d))
	return &DealershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DealershipClient) UpdateOneID(id int) *DealershipUpdateOne {
	mutation := newDealershipMutation(c.config, OpUpdateOne, withDealershipID(id))
	return &DealershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dealership.
func (c *DealershipClient) Delete() *DealershipDelete {
	mutation := newDealershipMutation(c.config, OpDelete)
	return &DealershipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DealershipClient) DeleteOne(d *Dealership) *DealershipDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DealershipClient) DeleteOneID(id int) *DealershipDeleteOne {
	builder := c.Delete().Where(dealership.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DealershipDeleteOne{builder}
}

// Query returns a query builder for Dealership.
func (c *DealershipClient) Query() *DealershipQuery {
	return &DealershipQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDealership},
		inters: c.Interceptors(),
	}
}

// Get returns a Dealership entity by its id.
func (c *DealershipClient) Get(ctx context.Context, id int) (*Dealership, error) {
	return c.Query().Where(dealership.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DealershipClient) GetX(ctx context.Context, id int) *Dealership {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCars queries the cars edge of a Dealership.
func (c *DealershipClient) QueryCars(d *Dealership) *CarsQuery {
	query := (&CarsClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(dealership.Table, dealership.FieldID, id),
			sqlgraph.To(cars.Table, cars.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, dealership.CarsTable, dealership.CarsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DealershipClient) Hooks() []Hook {
	return c.hooks.Dealership
}

// Interceptors returns the client interceptors.
func (c *DealershipClient) Interceptors() []Interceptor {
	return c.inters.Dealership
}

func (c *DealershipClient) mutate(ctx context.Context, m *DealershipMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DealershipCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DealershipUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DealershipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DealershipDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Dealership mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Cars, Dealership []ent.Hook
	}
	inters struct {
		Cars, Dealership []ent.Interceptor
	}
)
