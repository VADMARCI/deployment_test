// Copyright 2022-present Vlabs Development Kft
//
// All rights reserved under a proprietary license.
//
// Code generated by entc, DO NOT EDIT.

package cars

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cars type in the database.
	Label = "cars"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeDealershipCars holds the string denoting the dealership_cars edge name in mutations.
	EdgeDealershipCars = "dealership_cars"
	// Table holds the table name of the cars in the database.
	Table = "cars"
	// DealershipCarsTable is the table that holds the dealership_cars relation/edge. The primary key declared below.
	DealershipCarsTable = "cars_dealership_cars"
	// DealershipCarsInverseTable is the table name for the Dealership entity.
	// It exists in this package in order to avoid circular dependency with the "dealership" package.
	DealershipCarsInverseTable = "dealerships"
)

// Columns holds all SQL columns for cars fields.
var Columns = []string{
	FieldID,
}

var (
	// DealershipCarsPrimaryKey and DealershipCarsColumn2 are the table columns denoting the
	// primary key for the dealership_cars relation (M2M).
	DealershipCarsPrimaryKey = []string{"cars_id", "dealership_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Cars queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDealershipCarsCount orders the results by dealership_cars count.
func ByDealershipCarsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDealershipCarsStep(), opts...)
	}
}

// ByDealershipCars orders the results by dealership_cars terms.
func ByDealershipCars(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDealershipCarsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDealershipCarsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DealershipCarsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DealershipCarsTable, DealershipCarsPrimaryKey...),
	)
}
